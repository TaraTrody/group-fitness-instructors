{"version":3,"sources":["../../../../src/server/db/models/user.model.js"],"names":["UserSchema","mongoose","Schema","name","type","String","trim","required","email","unique","match","password","min","max","created","Date","default","now","updated","pre","next","isModified","bcrypt","hash","err","methods","authenticate","plaintextPassword","compare","hashed_password","path","validate","v","invalidate","isNew","model"],"mappings":";;;;;;;AAAA;;AACA;;;;;;AAEA,IAAMA,UAAU,GAAG,IAAIC,kBAASC,MAAb,CAAoB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAC,EAAAA,IAAI,EAAE;AACJC,IAAAA,IAAI,EAAEC,MADF;AAEJC,IAAAA,IAAI,EAAE,IAFF;AAGJC,IAAAA,QAAQ,EAAE;AAHN,GAb+B;AAkBrCC,EAAAA,KAAK,EAAE;AACLJ,IAAAA,IAAI,EAAEC,MADD;AAELI,IAAAA,MAAM,EAAE,IAFH;AAGLF,IAAAA,QAAQ,EAAE,mBAHL;AAIL;AACAG,IAAAA,KAAK,EAAE,CAAC,+CAAD;AALF,GAlB8B;AAyBrCC,EAAAA,QAAQ,EAAE;AACRP,IAAAA,IAAI,EAAEC,MADE;AAERE,IAAAA,QAAQ,EAAE,sBAFF;AAGRK,IAAAA,GAAG,EAAE,CAAC,CAAD,EAAI,0CAAJ,CAHG;AAIRC,IAAAA,GAAG,EAAE;AAJG,GAzB2B;AAgCrC;AACA;AACA;AACA;AACA;AAEAC,EAAAA,OAAO,EAAE;AACPV,IAAAA,IAAI,EAAEW,IADC;AAEPC,IAAAA,OAAO,EAAED,IAAI,CAACE;AAFP,GAtC4B;AA2CrCC,EAAAA,OAAO,EAAE;AACPd,IAAAA,IAAI,EAAEW;AADC;AA3C4B,CAApB,CAAnB,C,CAgDA;;AAEAf,UAAU,CAACmB,GAAX,CAAe,MAAf,EAAuB,UAAUC,IAAV,EAAgB;AACrC,MAAI,CAAC,KAAKC,UAAL,CAAgB,UAAhB,CAAL,EAAkC;AAChC,WAAOD,IAAI,EAAX;AACD;;AAED,MAAI;AACFE,oBAAOC,IAAP,CAAY,KAAKZ,QAAjB,EAA2B,EAA3B,EAA+B,UAASa,GAAT,EAAcD,IAAd,EAAoB;AACjD,UAAIC,GAAJ,EAAS,OAAOJ,IAAI,CAACI,GAAD,CAAX;AACT,WAAKb,QAAL,GAAgBY,IAAhB;AACAH,MAAAA,IAAI;AAEL,KALD;AAOD,GARD,CAQE,OAAOI,GAAP,EAAY;AACZJ,IAAAA,IAAI,CAACI,GAAD,CAAJ;AACD;AACF,CAhBD;AAkBAxB,UAAU,CAACyB,OAAX,GAAqB;AAGnBC,EAAAA,YAHmB,wBAGNC,iBAHM,EAGa;AAC9B,QAAI;AACF,aAAOL,gBAAOM,OAAP,CAAeD,iBAAf,EAAkC,KAAKE,eAAvC,CAAP;AACD,KAFD,CAEE,OAAOL,GAAP,EAAY;AACZ,YAAMA,GAAN;AACD;AACF;AATkB,CAArB;AAYAxB,UAAU,CAAC8B,IAAX,CAAgB,UAAhB,EAA4BC,QAA5B,CAAqC,UAACC,CAAD,EAAO;AAC1C,MAAI,KAAI,CAACrB,QAAL,IAAiB,KAAI,CAACA,QAAL,GAAgB,CAArC,EAAwC;AACtC,IAAA,KAAI,CAACsB,UAAL,CAAgB,UAAhB,EAA4B,wCAA5B;AACD;;AACD,MAAI,KAAI,CAACC,KAAL,IAAc,CAAC,KAAI,CAACvB,QAAxB,EAAkC;AAChC,IAAA,KAAI,CAACsB,UAAL,CAAgB,UAAhB,EAA4B,uBAA5B;AACD;AACF,CAPD,EAOG,IAPH;;eASehC,kBAASkC,KAAT,CAAe,MAAf,EAAuBnC,UAAvB,C","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt';\n\nconst UserSchema = new mongoose.Schema({\n  // firstName: {\n  //   type: String,\n  //   min: [2, 'Name should be between 2 and 30 characters'],\n  //   max: [30, 'Name should be between 3 and 30 characters'],\n  //   required: 'First name is required',\n  // },\n  // lastName: {\n  //   type: String,\n  //   required: 'Last name is required',\n  //   min: [2, 'Name should be between 2 and 30 characters'],\n  //   max: [30, 'Name should be between 3 and 30 characters'],\n  // },\n  name: {\n    type: String,\n    trim: true,\n    required: 'Name is required',\n  },\n  email: {\n    type: String,\n    unique: true,\n    required: 'Email is required',\n    // eslint-disable-next-line no-useless-escape\n    match: [/^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/],\n  },\n  password: {\n    type: String,\n    required: 'Password is required',\n    min: [8, 'Password must have at least 8 characters'],\n    max: 160,\n  },\n\n  // userType: {\n  //   type: String,\n  //   enum: ['Instructor', 'Studio/Gym'],\n  //   required: 'Please select',\n  // },\n\n  created: {\n    type: Date,\n    default: Date.now,\n  },\n\n  updated: {\n    type: Date,\n  },\n});\n\n// eslint-disable-next-line consistent-return\n\nUserSchema.pre(\"save\", function (next) {\n  if (!this.isModified('password')) {\n    return next();\n  }\n\n  try {\n    bcrypt.hash(this.password, 10, function(err, hash) {\n      if (err) return next(err)\n      this.password = hash \n      next()\n  \n    })\n\n  } catch (err) {\n    next(err);\n  }\n});\n\nUserSchema.methods = {\n\n\n  authenticate(plaintextPassword) {\n    try {\n      return bcrypt.compare(plaintextPassword, this.hashed_password);\n    } catch (err) {\n      throw err;\n    }\n  },\n};\n\nUserSchema.path('password').validate((v) => {\n  if (this.password && this.password < 8) {\n    this.invalidate('password', 'Password must be at least 8 characters')\n  }\n  if (this.isNew && !this.password) {\n    this.invalidate('password', 'Password is required.')\n  }\n}, null);\n\nexport default mongoose.model('User', UserSchema);\n"],"file":"user.model.js"}