{"version":3,"sources":["../../../src/server/controllers/auth.controllers.js"],"names":["signin","req","res","User","findOne","body","email","err","user","status","json","message","authenticate","password","token","jwt","sign","_id","config","jwtSecret","cookie","expire","Date","lastName","signout","clearCookie","requireSignin","secret","requestProperty","hasAuthorization","next","authorized","profile","auth","error"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;;;AAEA,IAAMA,MAAM,GAAG,SAATA,MAAS,CAACC,GAAD,EAAMC,GAAN,EAAc;AAC3BC,gBAAKC,OAAL,CACE;AACE,aAASH,GAAG,CAACI,IAAJ,CAASC;AADpB,GADF,EAGK,UAACC,GAAD,EAAMC,IAAN,EAAe;AAChB,QAAID,GAAG,IAAI,CAACC,IAAZ,EAAkB;AAChB,aAAON,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,QAAAA,OAAO,EAAE;AADiB,OAArB,CAAP;AAGD;;AACD,QAAI,CAACH,IAAI,CAACI,YAAL,CAAkBX,GAAG,CAACI,IAAJ,CAASQ,QAA3B,CAAL,EAA2C;AACzC,aAAOX,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,QAAAA,OAAO,EAAE;AADiB,OAArB,CAAP;AAGD;;AACD,QAAMG,KAAK,GAAGC,sBAAIC,IAAJ,CAAS;AAAEC,MAAAA,GAAG,EAAET,IAAI,CAACS;AAAZ,KAAT,EAA4BC,gBAAOC,SAAnC,CAAd;;AACAjB,IAAAA,GAAG,CAACkB,MAAJ,CAAW,GAAX,EAAgBN,KAAhB,EAAuB;AACrBO,MAAAA,MAAM,EAAE,IAAIC,IAAJ,KAAa;AADA,KAAvB;AAGA,WAAOpB,GAAG,CAACQ,IAAJ,CAAS;AACdI,MAAAA,KAAK,EAALA,KADc;AAEdN,MAAAA,IAAI,EAAE;AAAES,QAAAA,GAAG,EAAET,IAAI,CAACS,GAAZ;AAAiBM,QAAAA,QAAQ,EAAEf,IAAI,CAACe,QAAhC;AAA0CjB,QAAAA,KAAK,EAAEE,IAAI,CAACF;AAAtD;AAFQ,KAAT,CAAP;AAID,GAtBH;AAuBD,CAxBD;;AAyBA,IAAMkB,OAAO,GAAG,SAAVA,OAAU,CAACvB,GAAD,EAAMC,GAAN,EAAc;AAC5BA,EAAAA,GAAG,CAACuB,WAAJ,CAAgB,GAAhB;AACA,SAAOvB,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BC,IAAAA,OAAO,EAAE;AADiB,GAArB,CAAP;AAGD,CALD;;AAMA,IAAMe,aAAa,GAAG,yBAAW;AAC/BC,EAAAA,MAAM,EAAET,gBAAOC,SADgB;AAE/BS,EAAAA,eAAe,EAAE;AAFc,CAAX,CAAtB;;AAIA,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAmB,CAAC5B,GAAD,EAAMC,GAAN,EAAW4B,IAAX,EAAoB;AAC3C,MAAMC,UAAU,GAAG9B,GAAG,CAAC+B,OAAJ,IAAe/B,GAAG,CAACgC,IAAnB,IAA2BhC,GAAG,CAAC+B,OAAJ,CAAYf,GAAZ,IAAmBhB,GAAG,CAACgC,IAAJ,CAAShB,GAA1E;;AACA,MAAG,CAAEc,UAAL,EAAkB;AAAE;AAClB,WAAO7B,GAAG,CAACO,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AAC1BwB,MAAAA,KAAK,EAAE;AADmB,KAArB,CAAP;AAGD;;AACDJ,EAAAA,IAAI;AACL,CARD;;eAUe;AAAE9B,EAAAA,MAAM,EAANA,MAAF;AAAUwB,EAAAA,OAAO,EAAPA,OAAV;AAAmBE,EAAAA,aAAa,EAAbA,aAAnB;AAAkCG,EAAAA,gBAAgB,EAAhBA;AAAlC,C","sourcesContent":["import jwt from 'jsonwebtoken'\nimport expressJwt from 'express-jwt'\nimport User from '../db/models/user.model'\nimport config from '../../config/config'\n\nconst signin = (req, res) => {\n  User.findOne(\n    {\n      'email': req.body.email\n    }, (err, user) => {\n      if (err || !user) {\n        return res.status(401).json({\n          message: 'User not found'\n        })\n      }\n      if (!user.authenticate(req.body.password)) {\n        return res.status(401).json({\n          message: \"Email and password don't match\"\n        })\n      }\n      const token = jwt.sign({ _id: user._id }, config.jwtSecret)\n      res.cookie(\"t\", token, {\n        expire: new Date() + 9999\n      })\n      return res.json({\n        token,\n        user: { _id: user._id, lastName: user.lastName, email: user.email }\n      })\n    })\n}\nconst signout = (req, res) => {\n  res.clearCookie('t')\n  return res.status(200).json({\n    message: 'Successfully signed out'\n  })\n}\nconst requireSignin = expressJwt({\n  secret: config.jwtSecret,\n  requestProperty: 'auth' \n})\nconst hasAuthorization = (req, res, next) => {\n  const authorized = req.profile && req.auth && req.profile._id == req.auth._id \n  if(!(authorized)) { //why use this syntax\n    return res.status(403).json({\n      error: 'User is not authorized'\n    })\n  }\n  next()\n}\n\nexport default { signin, signout, requireSignin, hasAuthorization }"],"file":"auth.controllers.js"}