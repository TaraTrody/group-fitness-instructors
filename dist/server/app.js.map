{"version":3,"sources":["../../src/server/app.js"],"names":["app","mongoose","Promise","global","connect","config","mongoUri","connection","on","Error","use","bodyParser","json","urlencoded","extended","userRoutes","authRoutes","get","req","res","status","send","err","next","name","error","message","listen","port","console","log","info"],"mappings":";;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AACA;;;;AAGA,IAAMA,GAAG,GAAG,uBAAZ;AAEAC,kBAASC,OAAT,GAAmBC,MAAM,CAACD,OAA1B;;AACAD,kBAASG,OAAT,CAAiBC,gBAAOC,QAAxB;;AACAL,kBAASM,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,YAAM;AACpC,QAAM,IAAIC,KAAJ,0CAA4CJ,gBAAOC,QAAnD,EAAN;AACD,CAFD;;AAIAN,GAAG,CAACU,GAAJ,CAAQC,oBAAWC,IAAX,EAAR;AACAZ,GAAG,CAACU,GAAJ,CAAQC,oBAAWE,UAAX,CAAsB;AAAEC,EAAAA,QAAQ,EAAE;AAAZ,CAAtB,CAAR;AACAd,GAAG,CAACU,GAAJ,CAAQ,4BAAR;AACAV,GAAG,CAACU,GAAJ,CAAQ,2BAAR;AACAV,GAAG,CAACU,GAAJ,CAAQ,sBAAR;AACAV,GAAG,CAACU,GAAJ,CAAQ,oBAAR;AAEAV,GAAG,CAACU,GAAJ,CAAQ,SAAR,EAAmBK,aAAnB;AACAf,GAAG,CAACU,GAAJ,CAAQ,SAAR,EAAmBM,aAAnB;AAIAhB,GAAG,CAACiB,GAAJ,CAAQ,GAAR,EAAa,UAACC,GAAD,EAAMC,GAAN,EAAc;AAEzBA,EAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,wBAArB;AAED,CAJD,E,CAMA;;AACArB,GAAG,CAACU,GAAJ,CAAQ,UAACY,GAAD,EAAMJ,GAAN,EAAWC,GAAX,EAAgBI,IAAhB,EAAyB;AAC/B,MAAID,GAAG,CAACE,IAAJ,KAAa,mBAAjB,EAAsC;AACpCL,IAAAA,GAAG,CAACC,MAAJ,CAAW,GAAX,EAAgBR,IAAhB,CAAqB;AAAEa,MAAAA,KAAK,YAAKH,GAAG,CAACE,IAAT,eAAkBF,GAAG,CAACI,OAAtB;AAAP,KAArB;AACD;AACF,CAJD;AAMA;;AACA1B,GAAG,CAAC2B,MAAJ,CAAWtB,gBAAOuB,IAAlB,EAAwB,UAACN,GAAD,EAAS;AAC/B,MAAIA,GAAJ,EAAS;AACPO,IAAAA,OAAO,CAACC,GAAR,CAAYR,GAAZ;AACD;;AACDO,EAAAA,OAAO,CAACE,IAAR,CAAa,4BAAb,EAA2C1B,gBAAOuB,IAAlD;AACD,CALD","sourcesContent":["import express from 'express';\nimport bodyParser from 'body-parser';\nimport cookieParser from 'cookie-parser';\nimport compress from 'compression';\nimport cors from 'cors';\nimport helmet from 'helmet';\nimport mongoose from 'mongoose';\n\n\nimport config from '../config/config';\nimport Template from '../../template';\nimport userRoutes from './routes/user.routes'\nimport authRoutes from './routes/auth.routes'\n\n\nconst app = express();\n\nmongoose.Promise = global.Promise;\nmongoose.connect(config.mongoUri);\nmongoose.connection.on('error', () => {\n  throw new Error(`unable to connect to database: ${config.mongoUri}`);\n});\n\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({ extended: true }));\napp.use(cookieParser());\napp.use(compress());\napp.use(helmet());\napp.use(cors());\n\napp.use('/api/v1', userRoutes)\napp.use('/api/v1', authRoutes)\n\n\n\napp.get('/', (req, res) => {\n  \n  res.status(200).send(Template());\n\n});\n\n// eslint-disable-next-line no-unused-vars\napp.use((err, req, res, next) => {\n  if (err.name === 'UnauthorizedError') {\n    res.status(401).json({ error: `${err.name}: ${err.message}` });\n  }\n});\n\n/* eslint-disable no-console */\napp.listen(config.port, (err) => {\n  if (err) {\n    console.log(err);\n  }\n  console.info('Server started on port %s.', config.port);\n});\n"],"file":"app.js"}